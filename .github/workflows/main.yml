name: Deploy React to Amazon EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    name: Deploy React
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Create .env.production file
        run: |
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > .env.production
          cat .env.production  # 환경 변수 확인 (디버깅용)
      - name: Build React App
        run: |
          export CI=false  # ESLint 경고 무시
          npm install
          npm run build
          ls -l build
          
      - name: Check Built React App
        run: |
          grep -r "REACT_APP_API_URL" build/ || echo "No REACT_APP_API_URL found"


      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check nginx.conf file
        run: ls -l nginx.conf



      - name: Build & Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_REPO_FE }}:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            echo "✅ 기존 컨테이너 중지 및 삭제"
            sudo docker ps -qa | xargs -r sudo docker rm -f
            
            echo "✅ 사용하지 않는 Docker 이미지 정리"
            sudo docker image prune -f  # 사용되지 않는 이미지 삭제 (최신 이미지 다운로드 전에 실행)

            echo "✅ 최신 Docker 이미지 가져오기"
            sudo docker pull ${{ secrets.DOCKER_REPO_FE }}:latest

            echo "✅ 새로운 컨테이너 실행"
            sudo docker compose up -d

      - name: Check Built Files in Container
        run: |
          sudo docker create --name temp-container ${{ secrets.DOCKER_REPO_FE }}:latest
          sudo docker cp temp-container:/usr/share/nginx/html /tmp/html
          ls -l /tmp/html
          sudo docker rm temp-container